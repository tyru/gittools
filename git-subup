#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use Getopt::Long qw(:config gnu_compat no_bundling no_ignore_case);
use Pod::Usage;
use IO::Pager;

sub usage () {
    pod2usage(-verbose => 2);
}


my $needhelp;
my $no_summary;
my $no_pager;
my $recursively;
my $no_progress;
GetOptions(
    'h|help' => \$needhelp,
    'no-progress' => \$no_progress,
    'S|no-summary' => \$no_summary,
    'P|no-pager' => \$no_pager,
    'r|recursive' => \$recursively,
) or usage;
usage if $needhelp;


die "You need to run this command from the toplevel of the working tree.\n"
    if qx(git rev-parse --show-cdup) =~ /\S/;

my $previous_summary = qx(git submodule summary);
system
    qw(git submodule foreach),
    ($recursively ? qw(--recursive) : ()),
    ($no_progress ? qw(--quiet) : ()),
    'git pull ' . ($no_progress ? '--quiet' : '') . ' origin master; true';
my $current_summary = qx(git submodule summary);

if (!$no_summary
    && $current_summary ne ''
    && $previous_summary ne $current_summary)
{
    local *STDOUT = $no_pager ? *STDOUT : IO::Pager::open *STDOUT;
    print $current_summary;
}

__END__

=head1 NAME

    git-subup - update all submodules and show summary


=head1 SYNOPSIS

    $ git subup

=head1 OPTIONS

=over

=item -h, --help

Show this help.

=item --no-progress

Do not show the progress messages of C<git-fetch>.
See C<git-fetch>'s C<--quiet> option.
Note that C<--no-progress> affects to C<git submodule foreach> output.
--no-progress passes C<--quiet> to C<git submodule foreach>.

=item -S, --no-summary

Do not show the summary of C<git submodule summary>.

=item -P, --no-pager

Do not pipe pager.

=item -r, --recursive

Do update nested submodules.
See C<git-submodule>'s --recursive option.

=back


=head1 AUTHOR

tyru <tyru.exe@gmail.com>

#!/bin/sh

die() {
    echo "$@" >&2
    exit 1
}
add_failed_repo() {
    failed="$failed\n  $1"
}
report_failed_repo() {
    [ -n "$failed" ] && echo "Failed to fetch:$failed"
}
list_submodule_paths() {
    # NOTE: Read .gitmodules instead of using `git submodule status`
    # because it often exits when error occurred.
    # TODO: '=',"\n" character in path may break the result
    git config -f .gitmodules --list | \
        grep '\.path=' | sed 's/^submodule\..*\.path=//'
}
grep_managed_files() {
    # grep only version-control'ed files
    while read L; do
        # If the "$L" is managed
        if [ "`git ls-files "$L"`" ]; then
            echo "$L"
        else
            add_failed_repo "$L"
        fi
    done
}
grep_uninitialized() {
    while read L; do
        # If the first character is "-"
        if [ "`git submodule status "$L" | grep '^-'`" ]; then
            echo "$L"
        else
            add_failed_repo "$L"
        fi
    done
}
fetch_repo() {
    while read repo; do
        # TODO: Multi process? (How should I output?)
        (git submodule update --init "$repo" && \
            checkout_branch "$repo") || add_failed_repo "$repo"
    done
}
checkout_branch() {
    repo="$1"
    branch="`detect_checkout_branch "$repo"`"
    if [ "$branch" ]; then
        (cd "$repo" && git checkout "$branch")
    fi
}
detect_checkout_branch() {
    repo="$1"
    subinit_checkout=
    if [ -e .gitmodules ]; then
        regex="submodule.$repo.subinit-checkout"
        subinit_checkout="`git config -f .gitmodules --get "$regex"`"
    fi

    if [ "$subinit_checkout" ]; then
        # If the key "submodule.{submodule}.subinit-checkout"
        # exists in .gitmodules, use it.
        echo "$subinit_checkout"
    elif git branch | grep '^..master' >/dev/null; then
        # If 'master' branch exists, use it.
        echo 'master'
    fi

    # Or else, just return error (empty string).
}
grep_or_show_all() {
    if [ $# -eq 0 ]; then
        cat -
    else
        grep "$1"
    fi
}


set -e
cd "./`git rev-parse --show-cdup`" || \
    die 'cannot chdir to top directory of repository'

list_submodule_paths      | \
    grep_managed_files    | \
    grep_uninitialized    | \
    grep_or_show_all "$@" | \
    fetch_repo

# FIXME: `report_failed_repo` is not executed
report_failed_repo
